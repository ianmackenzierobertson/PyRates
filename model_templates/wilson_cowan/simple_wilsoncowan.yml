%YAML 1.2
---

# base rate coding operator
Op_rate:
  base: OperatorTemplate
  equations:
    - "d/dt * r = (alpha*sigmoid(s*(I_syn+I_ext-I_th)) - r)/tau"
  variables:
    r:
      default: output
    tau:
      default: 1.0
    s:
      default: 2.0
    alpha:
      default: 10.0
    I_th:
      default: 3.0
    I_ext:
      default: input
    I_syn:
      default: input

# excitatory node operator
E_op:
  base: OperatorTemplate
  equations:
    - "m = sigmoid(s*(v-theta))"
    - "d/dt * v = (I_e - I_i + I_ext + B - v) / tau"
  variables:
    m:
      default: output
    v:
      default: variable
    I_e:
      default: input
    I_i:
      default: input
    s:
      default: 0.6667
    theta:
      default: 0.0
    tau:
      default: 1.0
    I_ext:
      default: input
    B:
      default: 0.0

# inhibitory node operator
I_op:
  base: E_op
  variables:
    tau:
      default: 2.0

# edge operator
STP_op:
  base: OperatorTemplate
  equations:
    - "d/dt * x = (1.0-x)/tau_r - k_r*u*x*m_in"
    - "d/dt * u = (1.0-u)/tau_f + k_f*U0*(1.0/U0-u)*m_in"
    - "m_out = m_in*x*u"
  variables:
    m_in:
      default: input
    m_out:
      default: output
    x:
      default: variable(1.0)
    u:
      default: variable(1.0)
    tau_r:
      default: 10.0
    tau_f:
      default: 2.0
    k_r:
      default: 0.2
    k_f:
      default: 0.0
    U0:
      default: 1.0

# alternative edge operator parametrization
STP_op_2:
  base: STP_op
  variables:
    tau_r:
      default: 2.0
    tau_f:
      default: 20.0
    k_r:
      default: 0.0
    k_f:
      default: 0.6
    U_0:
      default: 0.05

# observation operator
Obs_op:
  base: OperatorTemplate
  equations:
    - "d/dt * meg = (I_syn/(2.0*N)-meg)/0.1"
  variables:
    meg:
      default: variable
    I_syn:
      default: input
    N:
      default: 1.0

# nodes and edges
#################

# basic rate-coded population
Pop_rate:
  base: NodeTemplate
  operators:
    - Op_rate

# basic wilson-cowan type populations
E_pop:
  base: NodeTemplate
  operators:
    - E_op

I_pop:
  base: NodeTemplate
  operators:
    - I_op

# edge 1
EE_edge:
  base: EdgeTemplate
  operators:
    - STP_op

# edge 2
EI_edge:
  base: EdgeTemplate
  operators:
    - STP_op_2

# observer
Obs:
  base: NodeTemplate
  operators:
    - Obs_op

# circuits
##########

WC_stp:
  base: CircuitTemplate
  nodes:
    E: E_pop
    I: I_pop
  edges:
    - [E/E_op/m, E/E_op/I_e, EE_edge, {weight: 1.0, EE_edge/STP_op/m_in: source}]
    - [E/E_op/m, I/I_op/I_e, EI_edge, {weight: 0.3, EI_edge/STP_op_2/m_in: source}]
    - [I/I_op/m, E/E_op/I_i, null, {weight: 0.7}]

# circuits
WC_simple:
  base: CircuitTemplate
  nodes:
    E: Pop_rate
    I: Pop_rate
  edges:
    - [E/Op_rate/r, I/Op_rate/I_syn, null, {weight: 10.0}]
    - [I/Op_rate/r, E/Op_rate/I_syn, null, {weight: -10.0}]
    - [E/Op_rate/r, E/Op_rate/I_syn, null, {weight: 5.0}]
    - [I/Op_rate/r, I/Op_rate/I_syn, null, {weight: -5.0}]
